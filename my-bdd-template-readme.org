#+html:<h1 align="center">My BDD project template</h1>
* Table of Contents
- [[#what][What]]
  - [[#features][Features]]
- [[#why][Why]]
- [[#for-whom][For Whom]]
- [[#how][How]]
  - [[#requirements][Requirements]]
  - [[#installation][Installation]]
  - [[#use][Use]]
    - [[#license][License]]
  - [[#development][Development]]
    - [[#process][Process]]
    - [[#important-decisions][Important Decisions]]
    - [[#to-do][To do]]
    - [[#contributing][Contributing]]
- [[#by-whom][By Whom]]

* What
repo template for bdd projects
** Features
* Why
* For Whom
* How
** Requirements
** Installation
** Use
create repo from git@github.com:jessenieboer/my-bdd-template.git

make your own branch

hard-code your file and directory paths in .project.el

have user-stories.org with story headlines and testable scenarios below that. testable scenarios have accompanying code. if some tests need to be grouped together for context reasons, have a separate test structure tree (sessions/packages/modules/classes) and use noweb stuff to keep things organized

tangle to generate test files?

mark unimplemented tests as @skip, in progress as xfail when committing

note that with python-bdd, when you have a scenario with a step argument that contains a quoted string, the quotes will be included when it's passed as a step argument, (so "friday" in the feature file will be '"friday"' in the step definition)
*** development process
**** capture requirements
:PROPERTIES:
:ID:       71440f11-48b5-4866-9c83-b9fd4eb90873
:END:
capture software requirements in either of these forms:
- idea :: anything worth writing down
  - unstructured text 
  - /bdd/ideas.txt
- story :: a more fleshed-out requirement in a specific format
  - /bdd/stories.org
  - title + metadata + story text
    - story text is in the form of "as a <role>, i want <feature> so that <benefit>" to stories.org
    - title should succinctly describe the desired feature
    - metadata has to do with work management:
      :ID: <id>
      :CATEGORY: task
      :EFFORT_TYPE: work
      :FREQUENCY: once
      :HAS_DUE_DATE: no
      :EFFORT_AMOUNT: average
      :BUDGET_IMPACT: trivial
      :COMMITMENT: probably
      :HARD_DATE_DEPENDENCY: no
      :SOFT_DATE_DEPENDENCY: no
      :HARD_INTERNAL_DEPENDENCY: no
      :SOFT_INTERNAL_DEPENDENCY: no
      :HARD_EXTERNAL_DEPENDENCY: no
      :SOFT_EXTERNAL_DEPENDENCY: no
      :EFFORT: 0d
      :ESTIMATED_COST: 0
      :ACTUAL_EFFORT: 
      :ACTUAL_COST: 
**** generate stories
give the ai ai-instructions.org and ask it to generate stories for ideas.txt

review and edit the output, and then combine with any stories you wrote yourself.

record everything in stories.org; replace all instances of >id< with a new org id

keep all stories at the same headline level; use tags to categorize and agenda views to sort and filter?

use quotes to denote strings in gherkin step arguments (for sake of clarity)

**** generate scenarios
give the ai ai-instructions.org and ask it to generate scenarios for stories.org

review and edit the output, and then combine with any scenarios you wrote yourself.
- could be many scenarios generated from a single user story

at this point, tangle to standalone feature files in /bdd/features. note that you might have to create the directory

running your test framework at this point should give you "Step definition is not found" errors

**** generate tests
give the ai all your feature files and ask it to generate tests.  

troubleshooting
- make sure step definition files do not get collected in pytest.ini. this might be happening if your step definitions aren't running with the correct context and you are seeing "fixture not found" errors for step arguments

*** License
** Development
*** Process
*** Important Decisions
use python-bdd rather than behave because
- emacs integration
- fixtures
- pytest can be used outside bdd projects
*** To do
*** Contributing
* By Whom
